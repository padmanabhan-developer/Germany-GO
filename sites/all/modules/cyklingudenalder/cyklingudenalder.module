<?php
function cyklingudenalder_mail($key,&$message,$params){
	switch ($key) {
		case 'send_email':
	    $message['subject']=t($params['subject']);
	    $message['body'][0]=$params['body'];
	    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
			break;
  }
}

/**
* Implementation of hook_hook_info().
*/
function cyklingudenalder_menu() {
  $items['cyklingudenalder/activationemails'] = array(
	  'title' => 'Send Activation emails',
	  'page callback' => 'drupal_get_form',
	  'page arguments' => array('cykling_activation_form'),
	  'access callback' => array('check_cyklingudenalder_admin'),
	  'type' => MENU_NORMAL_ITEM,
	);
  $items['cyklingudenalder/untagpilot'] = array(
	  'title' => 'Remove pilot from location',
	  'page callback' => 'cyklingudenalder_untag_pilot',
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
	);
  $items['cyklingudenalder/makepassive'] = array(
	  'title' => 'Mark a pilot passive',
	  'page callback' => 'cyklingudenalder_makepassive',
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
	);
  $items['cyklingudenalder/makeactive'] = array(
	  'title' => 'Mark a pilot passive',
	  'page callback' => 'cyklingudenalder_makeactive',
	  'access callback' => TRUE,
	  'type' => MENU_CALLBACK,
	);
  $items['cyklingudenalder/p3'] = array(
  'title' => 'Remove pilot from location',
  'page callback' => 'p3',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
	);
	$items['admin/cyklingudenalder/administer/user-locations'] = array(
  'title' => 'Manage User locations',
  'page callback' => 'drupal_get_form',
  'page arguments' => array('cyklingudenalder_manage_pilot_locations'),
  'access callback' => 'allow_administer_locations',
  'type' => MENU_NORMAL_ITEM,
	);
	$items['admin/cyklingudenalder/administer/user-locations/pilot'] = array(
  'title' => 'Manage Pilot locations',
  'description' => t("A place to manage pilots' locations"),
  // 'page callback' => 'drupal_get_form',
  // 'page arguments' => array('cyklingudenalder_manage_pilot_locations'),
  // 'access callback' => 'allow_administer_locations',
  'type' => MENU_DEFAULT_LOCAL_TASK,
  'weight' => 0,
	);
	$items['admin/cyklingudenalder/administer/user-locations/coordinator'] = array(
  'title' => 'Manage Coordinator locations',
  'description' => t("A place to manage coordinators' locations"),
  'page callback' => 'drupal_get_form',
  'page arguments' => array('cyklingudenalder_manage_pilot_locations'),
  'access callback' => 'allow_administer_locations',
  'type' => MENU_LOCAL_TASK,
  'weight' => 1,
	);
  $items['getusersofkommune'] = array(
  'title' => 'Get the user list for a kommune',
  'page callback' => 'getusersofkommune',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
	);
  $items['getlocations'] = array(
  'title' => 'Get the locations of a kommune',
  'page callback' => 'getlocations',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
	);
  $items['getlocationsflaggedbyuser'] = array(
  'title' => 'Get the locations flagged by user',
  'page callback' => 'getlocationsflaggedbyuser',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
	);
  $items['saveuserlocations'] = array(
  'title' => 'Save User Locations',
  'page callback' => 'saveuserlocations',
  'access callback' => TRUE,
  'type' => MENU_CALLBACK,
	);
	return $items;
}

function allow_administer_locations(){
	global $user;
	if($user->uid == 1 || in_array('admin', $user->roles)){
		return TRUE;
	}else{
		return FALSE;
	}
}

function cyklingudenalder_untag_pilot(){
	global $user;
	$location_id = filter_xss(arg(2));
	$pilot_id = filter_xss(arg(3));

	$query_removepilot = db_delete('field_data_field_godkendte_piloter')
  	->condition('entity_id', $location_id)
  	->condition('field_godkendte_piloter_uid', $pilot_id)
  	->execute();
	$query_removepilot = db_delete('field_revision_field_godkendte_piloter')
		->condition('entity_id', $location_id)
		->condition('field_godkendte_piloter_uid', $pilot_id)
		->execute();
	$query_removepilot = db_delete('field_data_field_kaptajn')
		->condition('entity_id', $location_id)
		->condition('field_kaptajn_uid', $pilot_id)
		->execute();
	$query_removepilot = db_delete('field_revision_field_kaptajn')
		->condition('entity_id', $location_id)
		->condition('field_kaptajn_uid', $pilot_id)
		->execute();

  $flagg = flag_get_flag('lokation');
  $action = 'unflag';
  $flagg->flag($action, $location_id);
  $truncate_field_cache = db_truncate('cache_field')->execute();
  echo "success";
}

function cykling_activation_form($form, &$form_state){
	$form = array();
	$form['to_emails'] = array(
		'#type' => 'textarea','#title' => 'Enter the recepient E-mails',
	);
	$form['email_subject'] = array(
		'#type' => 'textfield','#title' => 'Email Subject',
	);
	$form['email_body'] = array(
		'#type' => 'textarea','#title' => 'Email Body',
	);
	$form['send_email_submit'] = array(
		'#type' => 'submit','#value' => 'Send Email',
	);
	return $form;
}

function cykling_activation_form_submit($form, &$form_state){
	$to_list = explode(';',$form_state['values']['to_emails']);
	$headers = "MIME-Version: 1.0" . "\r\n";
	$headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
	$headers .= 'From: <hej@cyklingudenalder.dk>' . "\r\n";
	$subject = $form_state['values']['email_subject'];
	$email_message = $form_state['values']['email_body'];
	if(count($to_list) > 0){
		foreach($to_list as $to_id){
			$recepient = user_load_by_mail($to_id);
			$activation_link = user_pass_reset_url($recepient);
			$email_message_single = str_replace('!activation_link', $activation_link, $email_message);
			$email_message_single = str_replace('!fname', $recepient->field_fornavn['und'][0]['value'], $email_message_single);
			$email_message_single = str_replace('!user_email', $recepient->mail, $email_message_single);

			$params = array('body' => $email_message_single, 'subject' => $subject, 'headers'=> $headers);
			drupal_mail('cyklingudenalder', 'send_email', $to_id, language_default(), $params, 'hej@cyklingudenalder.dk', TRUE);
		}
	}
}

function check_cyklingudenalder_admin(){
	global $user;
	if($user->uid && $user->uid == 1){
		return TRUE;
	}
	else{
		return FALSE;
	}
}

function pp($str){
	echo '<pre>';
	print_r($str);
	echo '</pre>';
}

function ppe($str){
	echo '<pre>';
	print_r($str);
	echo '</pre>';
	exit;
}

function build_email_text($text){
$activation_email_text = <<<EMAILBODY
"<p>Hej !fname ,</p>

<p>Tak fordi du vil være med i Cykling uden alder!</p>

<p>Du kan logge ind nu ved at klikke på linket herunder, eller ved at copy/paste det ind i din browser:</p>
!activation_link
<p>Ovenstående link kan kun bruges én gang, og vil lede dig hen til en side hvor du kan vælge det password du ønsker.</p>

<p>Efter du har valgt et password, vil du kunne logge ind på http://loop.cyklingudenalder.dk ved at bruge:</p>

<p>Dit brugernavn:  !user_email</p>

<p>God fornøjelse!</p>"
EMAILBODY;

}

function cyklingudenalder_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'user_profile_form')
  {
    $form['#submit'][] = 'cycklingudenalder_profile_form_submit';
  }
}

function cycklingudenalder_profile_form_submit($form, &$form_state){

 $form_state['redirect'] = 'lokationer';
}

/*
 * building data about the user who created the tur
 */

function build_user_info($userid){
	if(is_numeric($userid)){
	  $userinfo['first_name'] = db_query("select field_fornavn_value from field_data_field_fornavn where entity_id = $userid")->fetchObject()->field_fornavn_value;
	  $userinfo['last_name'] = db_query("select field_efternavn_value from field_data_field_efternavn where entity_id = $userid")->fetchObject()->field_efternavn_value;
	  $userinfo['role'] = db_query("SELECT DISTINCT r.name FROM role r,users_roles ur WHERE ur.rid=r.rid AND ur.uid = $userid")->fetchObject()->name;
	  $userinfo['email'] = db_query("select mail from users where uid = $userid")->fetchObject()->mail;
	  return $userinfo;
	}
	else{
		return $userinfo = array('first_name'=>'', 'last_name'=>'', 'role'=>'', 'email'=>'');
	}
}


function pilot_id($nodeid,$role=''){
	if(is_numeric($nodeid)){
	  $pilot_id = db_query("SELECT field_tur_frivillig_uid FROM field_data_field_tur_frivillig WHERE entity_id = $nodeid")->fetchObject()->field_tur_frivillig_uid;
	  return $pilot_id;
	}
	return '';
}

function cyklingudenalder_makepassive(){
	$uid = filter_xss(arg(2));
	$user_fields = user_load($uid);
	$user_fields->field_is_passive['und'][0]['value'] = 1;
	user_save($user_fields);
}


function cyklingudenalder_makeactive(){
	$uid = filter_xss(arg(2));
	$user_fields = user_load($uid);
	$user_fields->field_is_passive['und'][0]['value'] = 0;
	user_save($user_fields);
}

function get_kommune_names(){
	// the vocabulary id for kommune is 1
	$query = db_select('taxonomy_term_data', 'ttd')
		->fields('ttd',array('tid','name'))
		->condition('vid', 1, '=')
		->orderBy('name');
	$query_result = $query->execute();
	while($list = $query_result->fetchObject()){
		$kommune_list[$list->tid] = $list->name;
	}
	return $kommune_list;
}

/**
  * Implements hook_theme().
  */
function cyklingudenalder_theme() {
  return array('cyklingudenalder_manage_pilot_locations' => array(
    'render element' => 'form',
    'path' => drupal_get_path('module', 'cyklingudenalder'),
    'template' => 'cyklingudenalder_manage_locations',
    ),
  );
}

function taxonomy_get_users($term_id, $role_id) {
  $query = db_select('field_data_field_kommunetesttax', 'fdfk');
  $query->join('users','u','u.uid = fdfk.entity_id');
  $query->join('field_data_field_fornavn','fdff','fdff.entity_id = u.uid');
  $query->join('field_data_field_efternavn','fdfe','fdfe.entity_id = u.uid');
  $query->join('users_roles','ur','ur.uid = u.uid');
  $query->fields('u',array('mail','uid'))
  		->fields('fdff',array('field_fornavn_value'))
  		->fields('fdfe',array('field_efternavn_value'))
  		->fields('ur',array('rid'))
  		->condition('fdfk.entity_type','user','=')
  		->condition('fdfk.field_kommunetesttax_tid',$term_id,'=')
  		->orderBy('fdff.field_fornavn_value');
  if(isset($role_id)){
  	$query->condition('ur.rid',$role_id,'=');
  }
  $result = $query->execute();
	while($info_row = $result->fetchObject()){
		$user_info[$info_row->uid] = array(
			'fn' => $info_row->field_fornavn_value,
			'ln' => $info_row->field_efternavn_value,
			'mail' => $info_row->mail,
			'rid' => $info_row->rid,
		);
	}
  return $user_info;
}

function get_locations_of_user($user_id){
	$locations = array();
	if(isset($user_id) && is_numeric($user_id) ){
		$query = db_select('flagging', 'f');
		$query->join('node','n','n.nid = f.entity_id');
		$query->condition('f.uid',$user_id,'=');
		$query->condition('n.status',1,'=');
		$query->condition('f.fid',3,'='); // the flag id for lokation-flag is 3
		$query->fields('n',array('title','nid'));
		$query->orderBy('n.title');
		$query_result = $query->execute();
		while($row = $query_result->fetchObject()){
			$locations[$row->nid] = $row->title;
		}
	}
	return $locations;
}

function get_locations_of_kommune($tid){
	$locations = array();
	if(isset($tid) && is_numeric($tid) ){
		$query = db_select('field_data_field_kommunetesttax', 'fk');
		$query->join('node','n','n.nid = fk.entity_id');
		$query->condition('n.status',1,'=');
		$query->condition('fk.bundle','lokation','=');
		$query->condition('fk.field_kommunetesttax_tid',$tid,'=');
		$query->fields('n',array('title','nid'));
		$query->orderBy('n.title');
		$query_result = $query->execute();
		while($row = $query_result->fetchObject()){
			$locations[$row->nid] = $row->title;
		}
	}
	return $locations;
}

function getusersofkommune(){
	$kid = filter_xss($_POST['kid']);
	$user_type = filter_xss($_POST['profile']);
	if($user_type == 'coordinator'){
		$users_of_kommune = taxonomy_get_users($kid, 4);
	}else{
		$users_of_kommune = taxonomy_get_users($kid, 5);
	}
	echo user_list_html($users_of_kommune, $kid);
}

function getlocations(){
	$user_id = filter_xss($_POST['uid']);
	$kid = filter_xss($_POST['kid']);
	$locations = get_locations_of_kommune($kid);
	echo location_list_html($locations);
}

function getlocationsflaggedbyuser(){
	$user_id = filter_xss($_POST['uid']);
	$kid = filter_xss($_POST['kid']);
	$locations = get_locations_of_user($user_id);
	echo json_encode($locations);
}

function location_list_html($locations){
	$output = '<ul class="location_list_ul">';
	foreach($locations as $loc_nid => $loc_name){
		$output.= '<li class="location_list_item '.$li_class.'" userid="'.$user_id.'">';
		$output.= '<div class="location_name">';
		$output.= '
		<input id="location_checkbox_'.$loc_nid.'" class="location_checkbox" type="checkbox" name="'.$loc_name.'" value="'.$loc_nid.'"><label for="location_checkbox_'.$loc_nid.'"></label>'.$loc_name.'</input>
		';
		$output.= '</div>';
		$output.= '</li>';
	}
	$output.='</ul>';
	return $output;
}

function user_list_html($users_of_kommune, $kid){
	$output = '<ul class="user_list_ul">';
	$odd_even = array('user_list_item_odd','user_list_item_even');
	foreach($users_of_kommune as $user_id => $row){
		$odd_even = array_reverse($odd_even);
		$li_class = $odd_even[1];
		$output.= '<li onclick="trigger_ajax_for_location('.$user_id.','.$kid.')" class="user_list_item '.$li_class.'" userid="'.$user_id.'">';
		$output.= '<div>';
		$output.= '<div class="user_name">';
		$output.= '<span>'.$row['fn'].'</span>';
		$output.= ' ';
		$output.= '<span>'.$row['ln'].'</span>';
		$output.= '</div>';
		$output.= '<div class="user_email">'.$row['mail'].'</div>';
		$output.= '</div>';
		$output.= '</li>';
	}
	$output.='</ul>';
	return $output;
}

function cyklingudenalder_manage_pilot_locations($form, &$form_state){
	// CSS and JS related to this form is at cua_admin.css and cua_admin.js under SEVEN theme.
	$kommune_select_options = array();
	$profile_type = array('pilot'=>'pilot','coordinator'=>'coordinator');
	$kommune_select_options['select'] = '-- Vælg kommune --';
	foreach(get_kommune_names() as $key=>$value){
		$kommune_select_options[$key] = $value;
	}
	$form['community_select'] = array(
		'#type' => 'select',
		'#options' => $kommune_select_options,
		'#default_value' => t('Select'),
		'#attributes' => array('class'=>''),
	);
	$form['profiletype'] = array(
		'#type' => 'textfield',
		'#options' => $profile_type,
		'#attributes' => array('class'=>''),
		'#default_value' => $profile_type['pilot'],
	);
	if(arg(4)!='' && arg(4)=='coordinator'){
		$form['profiletype']['#default_value'] = $profile_type['coordinator'];
	}
	return $form;
}

function saveuserlocations(){
	$uid = $_POST['uid'];
	$user_object = user_load($uid);
	$loc_json = $_POST['location_data'];
	$locations = get_locations_of_user($uid);
	$new_locations = (array)json_decode($loc_json);

	$removed_locations = array_diff($locations, $new_locations);
	$added_locations = array_diff($new_locations, $locations);
	foreach($removed_locations as $nid => $name) {
		administer_user_flags('unflag', $user_object, $nid);
	}
	foreach($added_locations as $nid => $name) {
		administer_user_flags('flag', $user_object, $nid);
	}
	echo "completed";
}

function administer_user_flags($flag_action, $user_object, $nid){
	$result = 0;
	$flag = flag_get_flag('lokation');
	$flag->flag($flag_action, $nid, $user_object , TRUE);
}


?>
